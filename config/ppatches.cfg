# Configuration file

customMainMenu {

    ##########################################################################################################
    # fixRenderColors
    #--------------------------------------------------------------------------------------------------------#
    # Patches CustomMainMenu to use GlStateManager instead of directly invoking glColor*.
    # This fixes a bug that normally makes no difference, but is noticeable when using the vanilla.optimizeTessellatorDraw module. Enabling this patch should have no performance implications.
    ##########################################################################################################

    fixRenderColors {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


extraUtilities2 {

    ##########################################################################################################
    # disableSkyLightInCustomDimensions
    #--------------------------------------------------------------------------------------------------------#
    # Patches Extra Utilities 2 to disable sky light in the Quantum Quarry and Deep Dark dimensions.
    # This could result in a slight performance increase on the server side, in particular when the Quantum Quarry is active.
    ##########################################################################################################

    disableSkyLightInCustomDimensions {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

    ##########################################################################################################
    # optimizeItemCaptureHandler
    #--------------------------------------------------------------------------------------------------------#
    # Patches Extra Utilities 2 to optimize the ItemCaptureHandler class to eliminate the need to create an item entity for each captured item drop.
    # This will result in a server-side performance increase of 15-30% for blocks which use it, in particular the Quantum Quarry.
    ##########################################################################################################

    optimizeItemCaptureHandler {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


foamFix {

    ##########################################################################################################
    # optimizeTextureInterpolation
    #--------------------------------------------------------------------------------------------------------#
    # Patches FoamFix to optimize the algorithm used for blending between frames of animated textures with interpolation enabled, such as lava or command blocks.
    # This is unlikely to give any meaningful performance benefits.
    ##########################################################################################################

    optimizeTextureInterpolation {
        # [default: DISABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=DISABLED
    }

    ##########################################################################################################
    # respectOptiFineSmartAnimations
    #--------------------------------------------------------------------------------------------------------#
    # Patches FoamFix to make OptiFine's "Smart Animations" work.
    # Without this patch, OptiFine's "Smart Animations" will have no effect if FoamFix is installed.
    ##########################################################################################################

    respectOptiFineSmartAnimations {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


forge {

    ##########################################################################################################
    # optimizeEventInstanceAllocation
    #--------------------------------------------------------------------------------------------------------#
    # Patches all Forge events and event handlers, and most references to Forge event buses, to allow resetting event instances when possible instead of allocating a new instance every time one is fired.
    # This can dramatically improve performance and/or reduce GC churn in some situations.
    ##########################################################################################################

    optimizeEventInstanceAllocation {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


java {

    ##########################################################################################################
    # separatedExceptionConstruction
    #--------------------------------------------------------------------------------------------------------#
    # Patches all Java code to move construction of exception objects out of the main method body and into a separate INVOKEDYNAMIC instruction.
    # This could theoretically improve performance in specific scenarios and on specific JVMs, but don't expect to see measurable improvements.
    ##########################################################################################################

    separatedExceptionConstruction {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


journeyMap {

    ##########################################################################################################
    # skipRenderingOffscreenTooltips
    #--------------------------------------------------------------------------------------------------------#
    # Patches JourneyMap to prevent it from rendering a tooltip for every widget on the screen, regardless of whether or not the mouse is hovering over the widget in question.
    # This will have the most effect when using a mod which adds lots of widgets to JourneyMap, such as FTB Utilities' chunk claiming.
    # In a test world with JourneyMap's minimap set to size 30, and all visible chunks claimed using FTB Utilities, this produced roughly a 3.5x speedup in JourneyMap map rendering (from ~60% of the total frame time to ~15%).
    ##########################################################################################################

    skipRenderingOffscreenTooltips {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


justPlayerHeads {

    ##########################################################################################################
    # fixSkinRetrieval
    #--------------------------------------------------------------------------------------------------------#
    # Patches JustPlayerHeads to make it be able to retrieve player skins again.
    # Somewhere around February 2023, Mojang changed their API to return formatted JSON strings instead of minified ones. For some reason, JustPlayerHeads retrieves player UUID and skin data by polling the Mojang API and then "parsing" the JSON by splitting on double-quotes, which no longer worked as expected when the API data format was changed. This patch makes JustPlayerHeads use Minecraft's built-in player profile cache to retrieve skin data without using Mojang's API directly (and also ends up being quite a bit faster as a result, since 99% of the time the skin data is already cached locally!)
    ##########################################################################################################

    fixSkinRetrieval {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


mekanism {

    ##########################################################################################################
    # optimizeSkyLightUpdates
    #--------------------------------------------------------------------------------------------------------#
    # Patches Mekanism to avoid triggering sky light updates in dimensions which don't have sky light.
    # This will dramatically reduce lag spikes when loading chunks containing large numbers of Mekanism machines in dimensions which don't have sky light, as the lighting algorithm is extremely slow at calculating sky light in these dimensions.
    ##########################################################################################################

    optimizeSkyLightUpdates {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


mixin {

    ##########################################################################################################
    # optimizeCallbackInfoAllocation
    #--------------------------------------------------------------------------------------------------------#
    # Patches all Mixin injection points to replace eligible allocations of CallbackInfo with a static instance which can be re-used.
    # This can dramatically improve performance and/or reduce GC churn in some situations, especially when there are other mods installed which use Mixin.
    ##########################################################################################################

    optimizeCallbackInfoAllocation {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO

        # If true, PPatches will transform Mixin callback methods which aren't private.
        # This should be safe, however it may need to be disabled if a mod does something very unusual.
        # [default: true]
        B:allowTransformingNonPrivateCallbacks=true
    }

}


openBlocks {

    ##########################################################################################################
    # fanAngleRounding
    #--------------------------------------------------------------------------------------------------------#
    # Patches OpenBlocks to align the rotation angles of its fans to a multiple of 10° (the angle by which the fans are rotated when right-clicked).
    # Without this patch, there is almost no way to make neighboring fans point in the same exact direction, however it is disabled by default due to the very slim possibility that it may break existing builds which rely on extremely precise fan placement.
    # This has no meaningful performance impact.
    ##########################################################################################################

    fanAngleRounding {
        # [default: DISABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=DISABLED
    }

    ##########################################################################################################
    # fanEntityOptimization
    #--------------------------------------------------------------------------------------------------------#
    # Patches OpenBlocks to optimize the processing of entities being pushed by fans.
    # This can have measurable performance benefits when there are many fans present in the world.
    ##########################################################################################################

    fanEntityOptimization {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

    ##########################################################################################################
    # fanUpdateBatching
    #--------------------------------------------------------------------------------------------------------#
    # Patches OpenBlocks to avoid re-scanning entities in the world when many fans are placed near each other in the world.
    # This can result in very large performance improvements for server tick rate when many OpenBlocks fans are placed close to each other.
    ##########################################################################################################

    fanUpdateBatching {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


optifine {

    ##########################################################################################################
    # optimizeReflector
    #--------------------------------------------------------------------------------------------------------#
    # Patches OptiFine to use MethodHandles in place of Java reflection.
    # This could give some minor performance benefits when OptiFine is installed, and will definitely help reduce GC churn.
    ##########################################################################################################

    optimizeReflector {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


vanilla {

    ##########################################################################################################
    # fixRemovePlayersOnServerShutdown
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's networking code to avoid disconnecting players twice.
    # This helps avoid crashing the dedicated server when the server is shut down while players are online.
    ##########################################################################################################

    fixRemovePlayersOnServerShutdown {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

    ##########################################################################################################
    # fontRendererBatching
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's font renderer to group together entire strings and send them to the GPU at once, instead of drawing each letter individually.
    # Whether or not this will give a performance increase depends on your GPU driver. AMD GPUs appear to benefit the most from this, have an FPS increase  of roughly 5% when the F3 menu is open.
    ##########################################################################################################

    fontRendererBatching {
        # [default: DISABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=DISABLED
    }

    ##########################################################################################################
    # fontRendererFixStyleResetShadow
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's font renderer to reset the text style when drawing text with a shadow.
    # Without this, text formatting from the end of the string will carry over to the front of the text unless it contains an explicit style reset sequence at the beginning or end.
    # This has no meaningful performance impact.
    ##########################################################################################################

    fontRendererFixStyleResetShadow {
        # [default: DISABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=DISABLED
    }

    ##########################################################################################################
    # optimizeItemRendererCacheModel
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's item renderer to re-use the same vertex data when rendering items which have the same mesh.
    # This should notably improve performance when rendering many items (generally during GUI rendering) by ~5% or more, and will definitely help reduce GC churn.
    ##########################################################################################################

    optimizeItemRendererCacheModel {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO

        # Determines which items should be excluded from this optimization.
        # Supported syntax is '<modid>:*' to target all items with a given modid, or '<modid>:<registry_name>.
        # [default: [mwc:*]]
        S:exclude <
            mwc:*
         >
    }

    ##########################################################################################################
    # optimizeSearchTree
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's SearchTree class to make initializing it faster.
    # This makes the SearchTree calculation run asynchronously, and avoids adding entries to the internal SuffixArray datastructure multiple times.
    # In large modpacks with many items and/or recipes, this can reduce client startup times by 10-20s (the effects are even more obvious if CraftTweaker is installed).
    ##########################################################################################################

    optimizeSearchTree {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO

        # If true, SearchTree recalculation will be done asynchronously.
        # This should be safe, however it may need to be disabled if a mod does something very unusual.
        # [default: true]
        B:asynchronousSearchTreeRecalculation=true
    }

    ##########################################################################################################
    # optimizeTessellatorDraw
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's Tessellator to use an alternative technique for sending draw commands to the GPU, which may be more efficient on some systems.
    # The tessellator is used for drawing many parts of the GUI (such as backgrounds, items in the inventory, and some tile entities), as well as for text if PPatches' "fontRendererBatching" module is enabled.
    # Whether or not this will give a performance increase depends on your GPU driver, and on some drivers it may cause visual bugs. NVIDIA GPUs in particular seem to get roughly 10-15% higher FPS without any noticeable issues, however AMD's driver seems to glitch out most of the time.
    ##########################################################################################################

    optimizeTessellatorDraw {
        # [default: DISABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=DISABLED

        # Selects the technique to use for uploading vertex data to the GPU.
        # Which mode is the fastest depends on your GPU driver. Testing indicates that NVIDIA devices work best with STAGING_BUFFER, while AMD devices get better performance when using ORPHAN_BUFFER. If you are seeing visual artifacts after enabling this module, try switching to another render mode.
        # [default: STAGING_BUFFER]
        # Accepted values:
        # - STAGING_BUFFER:
        #    Copies data directly to OpenGL using a persistently mapped buffer. Note that this requires driver support for either OpenGL 4.4 or ARB_buffer_storage!
        # - ORPHAN_BUFFER:
        #    Uses glBufferData to upload data to OpenGL, orphaning the previous buffer contents in the process. This should be supported everywhere, but may result in worse performance than STAGING_BUFFER on some drivers.
        S:mode=STAGING_BUFFER

        # If the mode is STAGING_BUFFER, this option controls the staging buffer's capacity in kilobytes.
        # Using a value that is very small can hurt performance, while too large will simply be a waste of memory. The default capacity should be fine for most users.
        # [default: 16384]
        # Minimum: 1, maximum: 2147483647
        I:stagingBufferCapacity=16384

        # If the mode is STAGING_BUFFER, invalidate the staging buffer contents should be kept in client memory (i.e. RAM instead of VRAM).
        # Whether or not this will give a performance increase depends on your GPU driver. NVIDIA devices seem to benefit from having it enabled.
        # [default: true]
        B:stagingBufferClientStorage=true

        # If the mode is STAGING_BUFFER, invalidate the staging buffer contents every time the staging buffer is filled up and reset.
        # Disabling this may cause visual artifacts, however not all GPU vendors may support it.
        # [default: true]
        B:stagingBufferInvalidateOnReset=true

        # If the mode is STAGING_BUFFER, enabling this option will print a message to the log every time the staging buffer is filled up.
        # This is only intended for debugging and for power users who want to tune the staging buffer capacity.
        # [default: false]
        B:stagingBufferLogOnReset=false
    }

    ##########################################################################################################
    # optimizeTextureUtilHeapAllocations
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's TextureUtil class to avoid allocating a 4MiB buffer on the Java heap every time part of an OpenGL texture is updated, even if the part of the texture being updated is much smaller than that.
    # This will probably not have much effect by itself, however it can significantly improve startup times for some mods. (e.g. Ancient Warfare)
    ##########################################################################################################

    optimizeTextureUtilHeapAllocations {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

    ##########################################################################################################
    # optimizeWorldHashing
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft's World class to cache its hash code, instead of using Java's default implementation.
    # For some reason, the default Object#hashCode() implementation appears to be very slow in some circumstances, even though it just delegates to System.identityHashCode(Object). This causes very bad performance anywhere a World is used as a key in a map (such as in MinecraftForgeClient.getRegionRenderCache(World, BlockPos), which is typically called once per tile entity per frame by TESR rendering code).
    # In a test world containing roughly 1000 OpenBlocks fans, this made MinecraftForgeClient#getRegionRenderCache(World, BlockPos) about 50x faster (from ~76% of the total frame time to ~1.5%). Your mileage may vary, however even in the worst case this patch should have no effect (enabling it won't make your game run slower).
    ##########################################################################################################

    optimizeWorldHashing {
        # [default: ENABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=ENABLED
    }

    ##########################################################################################################
    # optimizeWorldIsRemoteOnDedicatedServer
    #--------------------------------------------------------------------------------------------------------#
    # Patches all references to the isRemote field of Minecraft's World class to be hard-coded to false on the dedicated server.
    # This will slightly improve dedicated server performance, although the improvement will be extremely difficult to measure.
    ##########################################################################################################

    optimizeWorldIsRemoteOnDedicatedServer {
        # [default: ENABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=ENABLED
    }

    ##########################################################################################################
    # useFastThreadLocalThread
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft to use a Netty FastThreadLocalThread when creating the server thread.
    # This will slightly improve server thread performance.
    ##########################################################################################################

    useFastThreadLocalThread {
        # [default: ENABLED]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=ENABLED
    }

    ##########################################################################################################
    # useFasterRandom
    #--------------------------------------------------------------------------------------------------------#
    # Patches Minecraft to replace the most frequently used instances of java.util.Random and Math.random() with ThreadLocalRandom or a functionally equivalent version of java.util.Random which isn't thread-safe.
    # This will slightly improve server thread performance, especially when generating terrain.
    ##########################################################################################################

    useFasterRandom {
        # [default: AUTO]
        # Accepted values:
        # - ENABLED
        # - DISABLED
        # - AUTO
        S:state=AUTO
    }

}


